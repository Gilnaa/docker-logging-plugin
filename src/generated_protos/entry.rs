// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `protos/entry.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:LogEntry)
pub struct LogEntry {
    // message fields
    // @@protoc_insertion_point(field:LogEntry.source)
    pub source: ::std::string::String,
    // @@protoc_insertion_point(field:LogEntry.time_nano)
    pub time_nano: i64,
    // @@protoc_insertion_point(field:LogEntry.line)
    pub line: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:LogEntry.partial)
    pub partial: bool,
    // @@protoc_insertion_point(field:LogEntry.partial_log_metadata)
    pub partial_log_metadata: ::protobuf::MessageField<PartialLogEntryMetadata>,
    // special fields
    // @@protoc_insertion_point(special_field:LogEntry.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LogEntry {
    fn default() -> &'a LogEntry {
        <LogEntry as ::protobuf::Message>::default_instance()
    }
}

impl LogEntry {
    pub fn new() -> LogEntry {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "source",
            |m: &LogEntry| { &m.source },
            |m: &mut LogEntry| { &mut m.source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time_nano",
            |m: &LogEntry| { &m.time_nano },
            |m: &mut LogEntry| { &mut m.time_nano },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "line",
            |m: &LogEntry| { &m.line },
            |m: &mut LogEntry| { &mut m.line },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "partial",
            |m: &LogEntry| { &m.partial },
            |m: &mut LogEntry| { &mut m.partial },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PartialLogEntryMetadata>(
            "partial_log_metadata",
            |m: &LogEntry| { &m.partial_log_metadata },
            |m: &mut LogEntry| { &mut m.partial_log_metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LogEntry>(
            "LogEntry",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LogEntry {
    const NAME: &'static str = "LogEntry";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source = is.read_string()?;
                },
                16 => {
                    self.time_nano = is.read_int64()?;
                },
                26 => {
                    self.line = is.read_bytes()?;
                },
                32 => {
                    self.partial = is.read_bool()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.partial_log_metadata)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.source.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.source);
        }
        if self.time_nano != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.time_nano);
        }
        if !self.line.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.line);
        }
        if self.partial != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.partial_log_metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.source.is_empty() {
            os.write_string(1, &self.source)?;
        }
        if self.time_nano != 0 {
            os.write_int64(2, self.time_nano)?;
        }
        if !self.line.is_empty() {
            os.write_bytes(3, &self.line)?;
        }
        if self.partial != false {
            os.write_bool(4, self.partial)?;
        }
        if let Some(v) = self.partial_log_metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LogEntry {
        LogEntry::new()
    }

    fn clear(&mut self) {
        self.source.clear();
        self.time_nano = 0;
        self.line.clear();
        self.partial = false;
        self.partial_log_metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LogEntry {
        static instance: LogEntry = LogEntry {
            source: ::std::string::String::new(),
            time_nano: 0,
            line: ::std::vec::Vec::new(),
            partial: false,
            partial_log_metadata: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LogEntry {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LogEntry").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LogEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogEntry {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:PartialLogEntryMetadata)
pub struct PartialLogEntryMetadata {
    // message fields
    // @@protoc_insertion_point(field:PartialLogEntryMetadata.last)
    pub last: bool,
    // @@protoc_insertion_point(field:PartialLogEntryMetadata.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:PartialLogEntryMetadata.ordinal)
    pub ordinal: i32,
    // special fields
    // @@protoc_insertion_point(special_field:PartialLogEntryMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PartialLogEntryMetadata {
    fn default() -> &'a PartialLogEntryMetadata {
        <PartialLogEntryMetadata as ::protobuf::Message>::default_instance()
    }
}

impl PartialLogEntryMetadata {
    pub fn new() -> PartialLogEntryMetadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "last",
            |m: &PartialLogEntryMetadata| { &m.last },
            |m: &mut PartialLogEntryMetadata| { &mut m.last },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &PartialLogEntryMetadata| { &m.id },
            |m: &mut PartialLogEntryMetadata| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ordinal",
            |m: &PartialLogEntryMetadata| { &m.ordinal },
            |m: &mut PartialLogEntryMetadata| { &mut m.ordinal },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PartialLogEntryMetadata>(
            "PartialLogEntryMetadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PartialLogEntryMetadata {
    const NAME: &'static str = "PartialLogEntryMetadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.last = is.read_bool()?;
                },
                18 => {
                    self.id = is.read_string()?;
                },
                24 => {
                    self.ordinal = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.last != false {
            my_size += 1 + 1;
        }
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.id);
        }
        if self.ordinal != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.ordinal);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.last != false {
            os.write_bool(1, self.last)?;
        }
        if !self.id.is_empty() {
            os.write_string(2, &self.id)?;
        }
        if self.ordinal != 0 {
            os.write_int32(3, self.ordinal)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PartialLogEntryMetadata {
        PartialLogEntryMetadata::new()
    }

    fn clear(&mut self) {
        self.last = false;
        self.id.clear();
        self.ordinal = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PartialLogEntryMetadata {
        static instance: PartialLogEntryMetadata = PartialLogEntryMetadata {
            last: false,
            id: ::std::string::String::new(),
            ordinal: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PartialLogEntryMetadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PartialLogEntryMetadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PartialLogEntryMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PartialLogEntryMetadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12protos/entry.proto\"\xb9\x01\n\x08LogEntry\x12\x16\n\x06source\x18\
    \x01\x20\x01(\tR\x06source\x12\x1b\n\ttime_nano\x18\x02\x20\x01(\x03R\
    \x08timeNano\x12\x12\n\x04line\x18\x03\x20\x01(\x0cR\x04line\x12\x18\n\
    \x07partial\x18\x04\x20\x01(\x08R\x07partial\x12J\n\x14partial_log_metad\
    ata\x18\x05\x20\x01(\x0b2\x18.PartialLogEntryMetadataR\x12partialLogMeta\
    data\"W\n\x17PartialLogEntryMetadata\x12\x12\n\x04last\x18\x01\x20\x01(\
    \x08R\x04last\x12\x0e\n\x02id\x18\x02\x20\x01(\tR\x02id\x12\x18\n\x07ord\
    inal\x18\x03\x20\x01(\x05R\x07ordinalJ\xd8\x05\n\x06\x12\x04\x04\0\x12\
    \x01\nn\n\x01\x0c\x12\x03\x04\0\x122d*\n\x20Downloaded\x20from\x20https:\
    //github.com/moby/moby/blob/master/api/types/plugins/logdriver/entry.pro\
    to\n\n\n\n\x02\x04\0\x12\x04\x06\0\x0c\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x06\x08\x10\n\x0b\n\x04\x04\0\x02\0\x12\x03\x07\x08\x1a\n\r\n\x05\x04\0\
    \x02\0\x04\x12\x04\x07\x08\x06\x12\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x07\x08\x0e\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x07\x0f\x15\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x07\x18\x19\n\x0b\n\x04\x04\0\x02\x01\x12\x03\
    \x08\x08\x1c\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x08\x08\x07\x1a\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03\x08\x08\r\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x08\x0e\x17\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x08\x1a\x1b\n\
    \x0b\n\x04\x04\0\x02\x02\x12\x03\t\x08\x17\n\r\n\x05\x04\0\x02\x02\x04\
    \x12\x04\t\x08\x08\x1c\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\t\x08\r\n\
    \x0c\n\x05\x04\0\x02\x02\x01\x12\x03\t\x0e\x12\n\x0c\n\x05\x04\0\x02\x02\
    \x03\x12\x03\t\x15\x16\n\x0b\n\x04\x04\0\x02\x03\x12\x03\n\x08\x19\n\r\n\
    \x05\x04\0\x02\x03\x04\x12\x04\n\x08\t\x17\n\x0c\n\x05\x04\0\x02\x03\x05\
    \x12\x03\n\x08\x0c\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\n\r\x14\n\x0c\n\
    \x05\x04\0\x02\x03\x03\x12\x03\n\x17\x18\n\x0b\n\x04\x04\0\x02\x04\x12\
    \x03\x0b\x089\n\r\n\x05\x04\0\x02\x04\x04\x12\x04\x0b\x08\n\x19\n\x0c\n\
    \x05\x04\0\x02\x04\x06\x12\x03\x0b\x08\x1f\n\x0c\n\x05\x04\0\x02\x04\x01\
    \x12\x03\x0b\x204\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x0b78\n\n\n\x02\
    \x04\x01\x12\x04\x0e\0\x12\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0e\x08\x1f\
    \n\x0b\n\x04\x04\x01\x02\0\x12\x03\x0f\x08\x16\n\r\n\x05\x04\x01\x02\0\
    \x04\x12\x04\x0f\x08\x0e!\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x0f\x08\
    \x0c\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0f\r\x11\n\x0c\n\x05\x04\x01\
    \x02\0\x03\x12\x03\x0f\x14\x15\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x10\
    \x08\x16\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04\x10\x08\x0f\x16\n\x0c\n\
    \x05\x04\x01\x02\x01\x05\x12\x03\x10\x08\x0e\n\x0c\n\x05\x04\x01\x02\x01\
    \x01\x12\x03\x10\x0f\x11\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x10\x14\
    \x15\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x11\x08\x1a\n\r\n\x05\x04\x01\
    \x02\x02\x04\x12\x04\x11\x08\x10\x16\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\
    \x03\x11\x08\r\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x11\x0e\x15\n\x0c\
    \n\x05\x04\x01\x02\x02\x03\x12\x03\x11\x18\x19b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(LogEntry::generated_message_descriptor_data());
            messages.push(PartialLogEntryMetadata::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
